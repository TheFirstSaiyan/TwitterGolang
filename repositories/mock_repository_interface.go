// Code generated by MockGen. DO NOT EDIT.
// Source: example/layered-architecture/repositories (interfaces: RepositoryInterface)

// Package repositories is a generated GoMock package.
package repositories

import (
	models "example/layered-architecture/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddFollowee mocks base method.
func (m *MockRepositoryInterface) AddFollowee(arg0 *models.Follows) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFollowee", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFollowee indicates an expected call of AddFollowee.
func (mr *MockRepositoryInterfaceMockRecorder) AddFollowee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollowee", reflect.TypeOf((*MockRepositoryInterface)(nil).AddFollowee), arg0)
}

// AddTweet mocks base method.
func (m *MockRepositoryInterface) AddTweet(arg0 *models.Tweet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTweet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTweet indicates an expected call of AddTweet.
func (mr *MockRepositoryInterfaceMockRecorder) AddTweet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTweet", reflect.TypeOf((*MockRepositoryInterface)(nil).AddTweet), arg0)
}

// AddUser mocks base method.
func (m *MockRepositoryInterface) AddUser(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockRepositoryInterfaceMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockRepositoryInterface)(nil).AddUser), arg0)
}

// CheckFollowing mocks base method.
func (m *MockRepositoryInterface) CheckFollowing(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFollowing", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckFollowing indicates an expected call of CheckFollowing.
func (mr *MockRepositoryInterfaceMockRecorder) CheckFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFollowing", reflect.TypeOf((*MockRepositoryInterface)(nil).CheckFollowing), arg0, arg1)
}

// DeleteFollowee mocks base method.
func (m *MockRepositoryInterface) DeleteFollowee(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFollowee", arg0, arg1)
}

// DeleteFollowee indicates an expected call of DeleteFollowee.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteFollowee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollowee", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteFollowee), arg0, arg1)
}

// DeleteTweet mocks base method.
func (m *MockRepositoryInterface) DeleteTweet(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTweet", arg0)
}

// DeleteTweet indicates an expected call of DeleteTweet.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteTweet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTweet", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteTweet), arg0)
}

// GetAllUsers mocks base method.
func (m *MockRepositoryInterface) GetAllUsers() *[]models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].(*[]models.User)
	return ret0
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockRepositoryInterfaceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAllUsers))
}

// GetFolloweesOfUser mocks base method.
func (m *MockRepositoryInterface) GetFolloweesOfUser(arg0 string) *[]models.Follows {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolloweesOfUser", arg0)
	ret0, _ := ret[0].(*[]models.Follows)
	return ret0
}

// GetFolloweesOfUser indicates an expected call of GetFolloweesOfUser.
func (mr *MockRepositoryInterfaceMockRecorder) GetFolloweesOfUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolloweesOfUser", reflect.TypeOf((*MockRepositoryInterface)(nil).GetFolloweesOfUser), arg0)
}

// GetTweetsOfUser mocks base method.
func (m *MockRepositoryInterface) GetTweetsOfUser(arg0 string) *[]models.Tweet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweetsOfUser", arg0)
	ret0, _ := ret[0].(*[]models.Tweet)
	return ret0
}

// GetTweetsOfUser indicates an expected call of GetTweetsOfUser.
func (mr *MockRepositoryInterfaceMockRecorder) GetTweetsOfUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweetsOfUser", reflect.TypeOf((*MockRepositoryInterface)(nil).GetTweetsOfUser), arg0)
}

// SignIn mocks base method.
func (m *MockRepositoryInterface) SignIn(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockRepositoryInterfaceMockRecorder) SignIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockRepositoryInterface)(nil).SignIn), arg0)
}
